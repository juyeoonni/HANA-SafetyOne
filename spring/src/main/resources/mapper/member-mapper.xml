<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kopo.SelfFDS.member.model.dao.MemberMapper">
    <!-- 회원 전체 조회 -->
    <select id="getAllMember" parameterType="com.kopo.SelfFDS.member.model.dto.Member"
            resultType="com.kopo.SelfFDS.member.model.dto.Member">
        SELECT *
        FROM member
    </select>

    <!-- 로그인 -->
    <select id="loginMember" parameterType="HashMap" resultType="com.kopo.SelfFDS.member.model.dto.Member">
        SELECT *
        FROM member
        where EMAIL = #{email}
          and PASSWORD = #{password}
    </select>

    <select id="selectNameOfMember" parameterType="String" resultType="com.kopo.SelfFDS.member.model.dto.Member">
        SELECT *
        FROM member
        where EMAIL = #{email}
    </select>


    <insert id="insertMember" parameterType="com.kopo.SelfFDS.member.model.dto.Member">
        INSERT INTO MEMBER (EMAIL, NAME, PASSWORD, PHONE, gender, ADDRESS, IDENTITYNUM)
        VALUES (#{email}, #{name}, #{password}, #{phone}, #{gender}, #{address}, #{identityNum})
    </insert>

    <update id="updateMember" parameterType="com.kopo.SelfFDS.member.model.dto.Member">
        UPDATE member
        SET password = #{password},
            name     = #{name},
            phone    = #{phone}
        WHERE EMAIL = #{email}
    </update>

    <delete id="deleteMember" parameterType="String">
        DELETE
        FROM member
        WHERE EMAIL = #{email}
    </delete>


    <!--    card-->
    <!-- 카드 전체 조회 -->
    <select id="getAllCard" parameterType="com.kopo.SelfFDS.member.model.dto.Card"
            resultType="com.kopo.SelfFDS.member.model.dto.Card">
        SELECT *
        FROM card
    </select>

    <!-- 결제카드 & 비밀번호 -->
    <select id="selectPaymentCard" parameterType="HashMap" resultType="com.kopo.SelfFDS.member.model.dto.Card">
        SELECT *
        FROM card
        where cardId = #{cardId}
          and cardPassword = #{cardPassword}
    </select>

    <select id="selectCardOfEmail" parameterType="String" resultType="com.kopo.SelfFDS.member.model.dto.Card">
        SELECT *
        FROM card
        where EMAIL = #{email}
    </select>

    <select id="selectCardOfCardId" parameterType="String" resultType="com.kopo.SelfFDS.member.model.dto.Card">
        SELECT *
        FROM card
        where cardId = #{cardId}
    </select>

    <!--    safetycard 서비스 신청 udpate-->
    <update id="updateSelfFdsStatus" parameterType="com.kopo.SelfFDS.member.model.dto.Card">
        UPDATE card
        SET SELFfdsSerStatus = #{selffdsSerStatus}
        WHERE cardId = #{cardId}
    </update>

    <!--    fds서비스 신청 update-->
    <update id="updateFdsStatus" parameterType="com.kopo.SelfFDS.member.model.dto.Card">
        UPDATE card
        SET fdsSerStatus = #{fdsSerStatus}
        WHERE cardId = #{cardId}
    </update>


    <!--safetycard    -->
    <!--    지역이름 가져오기-->
    <select id="selectAllRegionName" resultType="String">
        SELECT regionName
        FROM REGION
        ORDER BY REGIONCODE
    </select>

    <!--    업종이름 가져오기-->
    <select id="selectAllBigCategory" resultType="String">
        SELECT CATEGORYBIG
        FROM CATEGORY
        GROUP BY CATEGORYBIG
    </select>

    <!--    업종 대분류로 소분류 가져오기-->
    <select id="selectSmallCategoryOfBigCategory" resultType="com.kopo.SelfFDS.member.model.dto.SafetyRegister">
        SELECT *
        FROM CATEGORY
        WHERE CATEGORYBIG = #{categoryBig}
    </select>


    <!--    cardhistory-->
    <select id="selectAllCardHistoryOfCardId" resultType="com.kopo.SelfFDS.member.model.dto.CardHistory">
        SELECT *
        FROM CARDHISTORY
        WHERE cardId = #{cardId}
        ORDER BY CARDHISDATE DESC
    </select>


    <!-- 카드별 지역통계 -->
    <select id="selectCountRegionOfCardId" resultType="com.kopo.SelfFDS.member.model.dto.CardHistory">
        SELECT regionName, COUNT(*) AS regionCnt, SUM(AMOUNT) AS amountSum
        FROM CARDHISTORY
        WHERE cardId = #{cardId}
        GROUP BY regionName
    </select>

    <!-- 카드별 대분류 업종통계 -->
    <select id="selectCountCategoryOfCardId" parameterType="String"
            resultType="com.kopo.SelfFDS.member.model.dto.CardHistory">
        SELECT CATEGORYBIG, COUNT(*) AS categoryCnt, SUM(AMOUNT) AS amountSum
        FROM CARDHISTORY
        WHERE CARDID = #{cardId}
        GROUP BY CATEGORYBIG;
    </select>

    <!-- 카드별 소분류 업종통계 -->
    <select id="selectCountSmallCategoryOfCardIdCategoryBig" resultType="com.kopo.SelfFDS.member.model.dto.CardHistory">
        SELECT CATEGORYBIG, CATEGORYSMALL as categorySmall, COUNT(*) AS categoryCnt, SUM(AMOUNT) AS amountSum
        FROM CARDHISTORY
        WHERE CARDID = #{cardId}
        GROUP BY CATEGORYBIG, CATEGORYSMALL
        HAVING CATEGORYBIG = #{categoryBig}
    </select>

    <!-- 카드별 거래시간통계 -->
    <select id="selectCountTimeOfCardId" resultType="com.kopo.SelfFDS.member.model.dto.CardHistory">
        SELECT SUBSTR(CARDHISTIME, 1, 2) AS TIME, COUNT(*) AS timeCnt, SUM(AMOUNT) AS amountSum
        FROM CARDHISTORY
        WHERE CARDID = #{cardId}
        GROUP BY SUBSTR(CARDHISTIME, 1, 2)
        ORDER BY TIME
    </select>


    <select id="selectAllSafetyCardOfCardId" resultType="com.kopo.SelfFDS.member.model.dto.SafetyCard">
        select *
        from safetycard
        WHERE CARDID = #{cardId}
    </select>


    <!--    safetyCard setting 정보 insert-->
    <insert id="insertSafetySetting" parameterType="com.kopo.SelfFDS.member.model.dto.SafetyCard">
        INSERT INTO SAFETYCARD(CARDID, SAFETYSTARTDATE, SAFETYENDDATE,ENROLLSEQ,safetyStringInfo
        <if test="regionName != null">,REGIONNAME</if>
        <if test="time != null">,TIME</if>
        <if test="categorySmall != null">,CATEGORYSMALL</if>
        )
        VALUES(
        #{cardId},sysdate, TO_DATE('2023/05/27', 'YYYY/MM/DD'),#{enrollSeq},#{safetyStringInfo}
        <!-- Conditionally add values -->
        <if test="regionName != null">,#{regionName}</if>
        <if test="time != null">,#{time}</if>
        <if test="categorySmall != null">,#{categorySmall}</if>
        )
    </insert>

    <select id="selectSafetySettingByCardId" parameterType="com.kopo.SelfFDS.member.model.dto.SafetyCard">
        select *
        from safetycard
        where cardId = #{cardId}
          and ENROLLSEQ = #{enrollSeq}
    </select>


    <!--    safetyCARD이용 정보-->
    <select id="selectSafetySettingByEmail" parameterType="com.kopo.SelfFDS.member.model.dto.SafetyCard">
        SELECT DISTINCT sc.cardId, sc.safetyStartDate, sc.safetyEndDate, sc.safetyStringInfo
        FROM safetyCard sc
        WHERE sc.cardId IN (SELECT cardId FROM card WHERE email = #{email})
    </select>


    <select id="selectSafetySettingEnrollSeqByCardId" parameterType="com.kopo.SelfFDS.member.model.dto.SafetyCard">
        SELECT COALESCE(MAX(ENROLLSEQ), 0) AS ENROLLSEQ
        FROM safetycard
        WHERE cardId = #{cardId}
    </select>


    <!--    분실카드 insert-->
    <insert id="insertLostCardInfo" parameterType="com.kopo.SelfFDS.member.model.dto.LostCard">
        INSERT INTO LostCard (lostcardidseq, regLostDate, cardId, lostDate, lostPlace, lostReason, reissued)
        VALUES (lostcard_id_seq.nextval, sysdate, #{cardId}, #{lostDate}, #{lostPlace}, #{lostReason}, #{reissued})
    </insert>

    <!--    일시정지 일자 update-->
    <update id="updateStopDate">
        UPDATE safetyCard
        SET stopStartDate = #{stopStartDate},
            stopEndDate   = #{stopEndDate}
        WHERE safetyIdSeq = #{safetyIdSeq}
    </update>


    <!--    mypage-->
    <select id="selectDifferenceMonthByCardId" parameterType="com.kopo.SelfFDS.member.model.dto.CardHistory">
        SELECT (SELECT SUM(amount)
                FROM cardhistory
                WHERE CARDID = #{cardId}
                  AND cardhisdate BETWEEN (SELECT MAX(cardhisdate) - 30
                                           FROM cardhistory
                                           where CARDID = #{cardId})
                    AND (SELECT MAX(cardhisdate) FROM cardhistory where CARDID = #{cardId}))
                   -
               (SELECT SUM(amount)
                FROM cardhistory
                WHERE CARDID = #{cardId}
                  AND cardhisdate BETWEEN (SELECT MAX(cardhisdate) - 60
                                           FROM cardhistory
                                           where CARDID = #{cardId})
                    AND (SELECT MAX(cardhisdate) - 30
                         FROM cardhistory
                         where CARDID = #{cardId})) AS difference
        FROM DUAL
    </select>


<!--    지날달대비 이번달 지출액이 큰 소비카테고리-->
    <select id="selectDiffCategoryOfMonthByCardId" parameterType="com.kopo.SelfFDS.member.model.dto.CardHistory">
        SELECT A.CATEGORYSMALL as  categorySmall,
               B.latestamount - A.lastamount as diffAmount,
               B.latestcnt - A.lastcnt as diffCnt
        FROM (SELECT CATEGORYSMALL,
                     SUM(amount)          AS lastamount,
                     COUNT(CATEGORYSMALL) AS lastcnt
              FROM cardhistory
              WHERE CARDID = #{cardId}
                AND cardhisdate BETWEEN
                  (SELECT MAX(cardhisdate) - 60 FROM cardhistory WHERE CARDID = #{cardId})
                  AND
                  (SELECT MAX(cardhisdate) - 30 FROM cardhistory WHERE CARDID = #{cardId})
              GROUP BY CATEGORYSMALL) A
                 LEFT JOIN
             (SELECT CATEGORYSMALL,
                     SUM(amount)          AS latestamount,
                     COUNT(CATEGORYSMALL) AS latestcnt
              FROM cardhistory
              WHERE CARDID = #{cardId}
                AND cardhisdate BETWEEN
                  (SELECT MAX(cardhisdate) - 30 FROM cardhistory WHERE CARDID = #{cardId})
                  AND
                  (SELECT MAX(cardhisdate) FROM cardhistory WHERE CARDID = #{cardId})
              GROUP BY CATEGORYSMALL) B
             ON A.CATEGORYSMALL = B.CATEGORYSMALL
    </select>

    <select id="selectAmountOfMonthByCardIdCategory" parameterType="com.kopo.SelfFDS.member.model.dto.CardHistory">
        SELECT SUBSTR(CARDHISDATE, 4, 2) AS month, SUM(AMOUNT) AS amountSum FROM CARDHISTORY
        WHERE CARDID=#{cardId} AND CATEGORYSMALL=#{categorySmall}
        GROUP BY SUBSTR(CARDHISDATE, 4, 2)
        ORDER BY MONTH
    </select>

    <select id="selectAmountOfMonthByCardId" parameterType="com.kopo.SelfFDS.member.model.dto.CardHistory">
        SELECT SUBSTR(CARDHISDATE, 4, 2) AS month, SUM(AMOUNT) AS amountSum FROM CARDHISTORY
        WHERE CARDID=#{cardId}
        GROUP BY SUBSTR(CARDHISDATE, 4, 2)
        ORDER BY MONTH
    </select>

    <select id="selectAmountOfWeekByCardId" parameterType="com.kopo.SelfFDS.member.model.dto.CardHistory">
        SELECT cardhisdate,SUM(amount) AS amountSum
        FROM cardhistory
        WHERE CARDID = #{cardId}
          AND cardhisdate BETWEEN
                (SELECT MAX(cardhisdate) - 7 FROM cardhistory WHERE CARDID = #{cardId})
            AND
                (SELECT MAX(cardhisdate) FROM cardhistory WHERE CARDID = #{cardId})
        GROUP BY cardhisdate
        ORDER BY cardhisdate
    </select>

    <select id="selectDayByCardIdDate" parameterType="com.kopo.SelfFDS.member.model.dto.CardHistory">
        SELECT *
        FROM cardhistory
        WHERE CARDID=#{cardId} and cardhisdate=#{cardHisDate}
    </select>

    <insert id="insertFds">
        INSERT INTO FDS (CARDID, serRegDate,SERVICESTATUS) VALUES (#{cardId},sysdate,#{serviceStatus})
    </insert>


</mapper>

