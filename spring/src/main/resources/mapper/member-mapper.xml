<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kopo.SelfFDS.member.model.dao.MemberMapper">
    <!-- 회원 전체 조회 -->
    <select id="getAllMember" parameterType="com.kopo.SelfFDS.member.model.dto.Member"
            resultType="com.kopo.SelfFDS.member.model.dto.Member">
        SELECT *
        FROM member
    </select>

    <!-- 로그인 -->
    <select id="loginMember" parameterType="HashMap" resultType="com.kopo.SelfFDS.member.model.dto.Member">
        SELECT *
        FROM member
        where EMAIL = #{email}
          and PASSWORD = #{password}
    </select>

    <select id="selectNameOfMember" parameterType="String" resultType="com.kopo.SelfFDS.member.model.dto.Member">
        SELECT *
        FROM member
        where EMAIL = #{email}
    </select>


    <insert id="insertMember" parameterType="com.kopo.SelfFDS.member.model.dto.Member">
        INSERT INTO MEMBER (EMAIL, NAME, PASSWORD, PHONE, gender, ADDRESS, IDENTITYNUM)
        VALUES (#{email}, #{name}, #{password}, #{phone}, #{gender}, #{address}, #{identityNum})
    </insert>

    <update id="updateMember" parameterType="com.kopo.SelfFDS.member.model.dto.Member">
        UPDATE member
        SET password = #{password},
            name     = #{name},
            phone    = #{phone}
        WHERE EMAIL = #{email}
    </update>

    <delete id="deleteMember" parameterType="String">
        DELETE
        FROM member
        WHERE EMAIL = #{email}
    </delete>


    <!--    card-->
    <!-- 카드 전체 조회 -->
    <select id="getAllCard" parameterType="com.kopo.SelfFDS.member.model.dto.Card"
            resultType="com.kopo.SelfFDS.member.model.dto.Card">
        SELECT *
        FROM card
    </select>

    <!-- 결제카드 & 비밀번호 -->
    <select id="selectPaymentCard" parameterType="HashMap" resultType="com.kopo.SelfFDS.member.model.dto.Card">
        SELECT *
        FROM card
        where cardId = #{cardId}
          and cardPassword = #{cardPassword}
    </select>

    <select id="selectCardOfEmail" parameterType="String" resultType="com.kopo.SelfFDS.member.model.dto.Card">
        SELECT *
        FROM card
        where EMAIL = #{email}
    </select>

    <select id="selectCardOfCardId" parameterType="String" resultType="com.kopo.SelfFDS.member.model.dto.Card">
        SELECT *
        FROM card
        where cardId = #{cardId}
    </select>

    <!--    safetycard 서비스 신청 udpate-->
    <update id="updateSelfFdsStatus" parameterType="com.kopo.SelfFDS.member.model.dto.Card">
        UPDATE card
        SET SELFfdsSerStatus = #{selffdsSerStatus}
        WHERE cardId = #{cardId}
    </update>

    <!--    fds서비스 신청 update-->
    <update id="updateFdsStatus" parameterType="com.kopo.SelfFDS.member.model.dto.Card">
        UPDATE card
        SET fdsSerStatus = #{fdsSerStatus}
        WHERE cardId = #{cardId}
    </update>


    <!--safetycard    -->
    <!--    지역이름 가져오기-->
    <select id="selectAllRegionName" resultType="String">
        SELECT regionName
        FROM REGION
        ORDER BY REGIONCODE
    </select>

    <!--    업종이름 가져오기-->
    <select id="selectAllBigCategory" resultType="String">
        SELECT CATEGORYBIG
        FROM CATEGORY
        GROUP BY CATEGORYBIG
    </select>

    <!--    업종 대분류로 소분류 가져오기-->
    <select id="selectSmallCategoryOfBigCategory" resultType="com.kopo.SelfFDS.member.model.dto.SafetyRegister">
        SELECT *
        FROM CATEGORY
        WHERE CATEGORYBIG = #{categoryBig}
    </select>

    <!--    업종 소분류로 대분류 가져오기-->
    <select id="selectBigCategoryOfSmallCategory" resultType="String">
        SELECT categoryBig
        FROM CATEGORY
        WHERE categorySmall = #{categorySmall}
    </select>


    <!--    cardhistory-->
    <select id="selectAllCardHistoryOfCardId" resultType="com.kopo.SelfFDS.member.model.dto.CardHistory">
        SELECT *
        FROM CARDHISTORY
        WHERE cardId = #{cardId}
          and cardhisdate >= TO_DATE('2023-06-04', 'YYYY-MM-DD')
        ORDER BY CARDHISDATE DESC
    </select>


    <!-- 카드별 지역통계 -->
    <select id="selectCountRegionOfEmail" resultType="com.kopo.SelfFDS.member.model.dto.CardHistory">
        SELECT SUBSTR(regionName, 1,
                      DECODE(INSTR(regionName, ' '), 0, LENGTH(regionName), INSTR(regionName, ' ') - 1)) AS regionName,
               SUM(amount) AS amountSum, count(*) as regionCnt
        FROM cardhistory
        WHERE cardhisdate >= TO_DATE('2023-7-10', 'YYYY-MM-DD')
          AND cardid IN (SELECT cardid FROM card WHERE email=#{email})
        GROUP BY SUBSTR(regionName, 1,
                        DECODE(INSTR(regionName, ' '), 0, LENGTH(regionName), INSTR(regionName, ' ') - 1))
        ORDER BY regionCnt desc
    </select>

    <!-- 카드별 대분류 업종통계 -->
    <select id="selectCountCategoryOfCardId" parameterType="String"
            resultType="com.kopo.SelfFDS.member.model.dto.CardHistory">
        SELECT CATEGORYBIG, COUNT(*) AS categoryCnt, SUM(AMOUNT) AS amountSum
        FROM CARDHISTORY
        WHERE CARDID = #{cardId}
        GROUP BY CATEGORYBIG;
    </select>

    <!-- 카드별 소분류 업종통계 -->
    <select id="selectCountSmallCategoryOfEmail" resultType="com.kopo.SelfFDS.member.model.dto.CardHistory">
        SELECT CATEGORYBIG, CATEGORYSMALL as categorySmall, COUNT(*) AS categoryCnt, SUM(AMOUNT) AS amountSum
        FROM CARDHISTORY
        WHERE cardhisdate >= TO_DATE('2023-7-10', 'YYYY-MM-DD')
          AND cardid IN (SELECT cardid FROM card WHERE email=#{email})
        GROUP BY CATEGORYBIG, CATEGORYSMALL
        HAVING CATEGORYBIG = #{categoryBig}
    </select>

    <!-- 카드별 소분류 top3 bottom3 -->
    <select id="selectSmallCategroyTopOfEmail" resultType="com.kopo.SelfFDS.member.model.dto.CardHistory">
        SELECT CATEGORYSMALL as categorySmall, COUNT(*) AS categoryCnt, SUM(AMOUNT) AS amountSum
        FROM CARDHISTORY
        WHERE cardhisdate >= TO_DATE('2023-7-10', 'YYYY-MM-DD')
          AND cardid IN (SELECT cardid FROM card WHERE email=#{email})
        GROUP BY CATEGORYSMALL
        order by categoryCnt desc
    </select>

    <!-- 카드별 거래시간통계 -->
    <select id="selectCountTimeOfEmail" resultType="com.kopo.SelfFDS.member.model.dto.CardHistory">
        SELECT SUBSTR(CARDHISTIME, 1, 2) AS TIME, COUNT(*) AS timeCnt, SUM(AMOUNT) AS amountSum
        FROM CARDHISTORY
        WHERE cardhisdate >= TO_DATE('2023-7-10', 'YYYY-MM-DD')
          AND cardid IN (SELECT cardid FROM card WHERE email=#{email})
        GROUP BY SUBSTR(CARDHISTIME, 1, 2)
        ORDER BY TIME
    </select>


    <select id="selectAllSafetyCardOfCardId" resultType="com.kopo.SelfFDS.member.model.dto.SafetyCard">
        select *
        from safetycard
        WHERE CARDID = #{cardId}
    </select>


    <!--    safetyCard setting 정보 insert-->
    <insert id="insertSafetySetting" parameterType="com.kopo.SelfFDS.member.model.dto.SafetyCard">
        INSERT INTO SAFETYCARD(CARDID, SAFETYSTARTDATE, SAFETYENDDATE
        <if test="regionName != null">,REGIONNAME</if>
        <if test="time != null">,TIME</if>
        <if test="categorySmall != null">,CATEGORYSMALL</if>
        )
        VALUES(
        #{cardId},TO_DATE('2023-10-14 13:21:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE(#{safetyEndDate}, 'YYYY-MM-DD HH24:MI:SS')
        <!-- Conditionally add values -->
        <if test="regionName != null">,#{regionName}</if>
        <if test="time != null">,#{time}</if>
        <if test="categorySmall != null">,#{categorySmall}</if>
        )
    </insert>

    <select id="selectSafetySettingByCardId" parameterType="com.kopo.SelfFDS.member.model.dto.SafetyCard">
        select *
        from safetycard
        where cardId = #{cardId}
    </select>


    <!--    safetyCARD이용 정보-->
    <select id="selectSafetySettingByEmail" parameterType="com.kopo.SelfFDS.member.model.dto.SafetyCard">
        SELECT DISTINCT
            sc.cardId,
            c.cardName as cardName,
            sc.safetyStartDate,
            sc.safetyEndDate
        FROM
            safetyCard sc
                JOIN
            card c ON sc.cardId = c.cardId
        WHERE
            c.email =#{email}
    </select>



    <!--    분실카드 insert-->
    <insert id="insertLostCardInfo" parameterType="com.kopo.SelfFDS.member.model.dto.LostCard">
        INSERT INTO LostCard (lostcardidseq, regLostDate, cardId, lostDate, lostPlace, lostReason, reissued)
        VALUES (lostcard_id_seq.nextval,TO_DATE('2023-10-13', 'YYYY-MM-DD'), #{cardId}, #{lostDate}, #{lostPlace}, #{lostReason}, #{reissued})
    </insert>


    <!--    일시정지 일자 update-->
    <update id="updateStopDate">
        UPDATE safetyCard
        SET status=#{status},
            stopStartDate = #{stopStartDate},
            stopEndDate   = #{stopEndDate}
        WHERE safetyIdSeq = #{safetyIdSeq}
    </update>


    <!--    mypage-->
    <select id="selectDifferenceMonthByCardId" parameterType="com.kopo.SelfFDS.member.model.dto.CardHistory">
        SELECT (SELECT SUM(amount)
                FROM cardhistory
                WHERE CARDID = #{cardId}
                  AND cardhisdate BETWEEN (SELECT MAX(cardhisdate) - 30
                                           FROM cardhistory
                                           where CARDID = #{cardId})
                    AND (SELECT MAX(cardhisdate) FROM cardhistory where CARDID = #{cardId}))
                   -
               (SELECT SUM(amount)
                FROM cardhistory
                WHERE CARDID = #{cardId}
                  AND cardhisdate BETWEEN (SELECT MAX(cardhisdate) - 60
                                           FROM cardhistory
                                           where CARDID = #{cardId})
                    AND (SELECT MAX(cardhisdate) - 30
                         FROM cardhistory
                         where CARDID = #{cardId})) AS difference
        FROM DUAL
    </select>


    <!--    지날달대비 이번달 지출액이 큰 소비카테고리-->
    <select id="selectDiffCategoryOfMonthByCardId" parameterType="com.kopo.SelfFDS.member.model.dto.CardHistory">
        SELECT A.CATEGORYSMALL as  categorySmall,
               B.latestamount - A.lastamount as diffAmount,
               B.latestcnt - A.lastcnt as diffCnt
        FROM (SELECT CATEGORYSMALL,
                     SUM(amount)          AS lastamount,
                     COUNT(CATEGORYSMALL) AS lastcnt
              FROM cardhistory
              WHERE CARDID = #{cardId}
                AND cardhisdate BETWEEN
                      (SELECT MAX(cardhisdate) - 60 FROM cardhistory WHERE CARDID = #{cardId})
                  AND
                      (SELECT MAX(cardhisdate) - 30 FROM cardhistory WHERE CARDID = #{cardId})
              GROUP BY CATEGORYSMALL) A
                 LEFT JOIN
             (SELECT CATEGORYSMALL,
                     SUM(amount)          AS latestamount,
                     COUNT(CATEGORYSMALL) AS latestcnt
              FROM cardhistory
              WHERE CARDID = #{cardId}
                AND cardhisdate BETWEEN
                      (SELECT MAX(cardhisdate) - 30 FROM cardhistory WHERE CARDID = #{cardId})
                  AND
                      (SELECT MAX(cardhisdate) FROM cardhistory WHERE CARDID = #{cardId})
              GROUP BY CATEGORYSMALL) B
             ON A.CATEGORYSMALL = B.CATEGORYSMALL
    </select>

    <select id="selectAmountOfMonthByCardIdCategory" parameterType="com.kopo.SelfFDS.member.model.dto.CardHistory">
        SELECT SUBSTR(CARDHISDATE, 4, 2) AS month, SUM(AMOUNT) AS amountSum FROM CARDHISTORY
        WHERE CARDID=#{cardId} AND CATEGORYSMALL=#{categorySmall}
        GROUP BY SUBSTR(CARDHISDATE, 4, 2)
        ORDER BY MONTH
    </select>

    <select id="selectAmountOfMonthByCardId" parameterType="com.kopo.SelfFDS.member.model.dto.CardHistory">
        SELECT SUBSTR(CARDHISDATE, 4, 2) AS month, SUM(AMOUNT) AS amountSum FROM CARDHISTORY
        WHERE CARDID=#{cardId}
        GROUP BY SUBSTR(CARDHISDATE, 4, 2)
        ORDER BY MONTH
    </select>

    <select id="selectAmountOfWeekByCardId" parameterType="com.kopo.SelfFDS.member.model.dto.CardHistory">
        SELECT cardhisdate,SUM(amount) AS amountSum
        FROM cardhistory
        WHERE CARDID = #{cardId}
          AND cardhisdate BETWEEN
                (SELECT MAX(cardhisdate) - 7 FROM cardhistory WHERE CARDID = #{cardId})
            AND
                (SELECT MAX(cardhisdate) FROM cardhistory WHERE CARDID = #{cardId})
        GROUP BY cardhisdate
        ORDER BY cardhisdate
    </select>

    <select id="selectDayByCardIdDate" parameterType="com.kopo.SelfFDS.member.model.dto.CardHistory">
        SELECT *
        FROM cardhistory
        WHERE CARDID=#{cardId} and cardhisdate=#{cardHisDate}
    </select>

    <insert id="insertFds">
        INSERT INTO FDS (CARDID, serRegDate,SERVICESTATUS) VALUES (#{cardId},TO_DATE('2023-10-12 14:12:00', 'YYYY-MM-DD HH24:MI:SS'),#{serviceStatus})
    </insert>

    <delete id="deleteFds">
        delete from FDS where CARDID=#{cardId}
    </delete>

    <delete id="deleteSafetyCard">
        delete from SAFETYCARD where CARDID=#{cardId}
    </delete>

    <!--    fds 서비스 해제하면 FDS 테이블에 STATUS 상태 변경-->
    <!--selffds서비스 해제하면 safetycard의 status N-->


    <select id="selectSafetyCardYByEmail" parameterType="com.kopo.SelfFDS.member.model.dto.Card">
        SELECT *
        FROM card
        WHERE email=#{email} and selffdsserstatus='Y'
    </select>

    <select id="selectSafetyCardNotRegionByCarId" parameterType="com.kopo.SelfFDS.member.model.dto.SafetyCard">
        select *
        from safetycard
        WHERE CARDID = #{cardId} and (categorysmall is not null or time is not null)
    </select>

    <select id="selectSafetyCardRegionByCarId" parameterType="com.kopo.SelfFDS.member.model.dto.SafetyCard">
        select *
        from safetycard
        WHERE CARDID = #{cardId} and categorysmall is null and time is null
    </select>



    <select id="selectAllSafetyCard" parameterType="com.kopo.SelfFDS.member.model.dto.SafetyCard">
        select *
        from safetycard
    </select>

    <select id="updateSafetyStatus" parameterType="com.kopo.SelfFDS.member.model.dto.SafetyCard">
        update safetycard
        set status=#{status}
        where safetyIdSeq=#{safetyIdSeq}
    </select>



</mapper>