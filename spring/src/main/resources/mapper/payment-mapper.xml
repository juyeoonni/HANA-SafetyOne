<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

    <mapper namespace="com.kopo.SelfFDS.payment.model.dao.PaymentMapper">
    <!-- 결제로그 전체조회-->
    <select id="getAllPaymentLog"
            resultType="com.kopo.SelfFDS.payment.model.dto.PaymentLog">
        select * from PAYMENTLOG
    </select>

    <!-- 거래승인,미승인내역 조회-->
    <select id="getAllPaymentLogByPaymentapproval"
            resultType="com.kopo.SelfFDS.payment.model.dto.PaymentLog">
        select * from PAYMENTLOG
        where paymentapprovalstatus=#{paymentApprovalStatus}
    </select>

    <!-- 이상탐지 데이터 조회-->
    <select id="getAllPaymentLogByFdsDetection"
            resultType="com.kopo.SelfFDS.payment.model.dto.PaymentLog">
        select * from PAYMENTLOG
        where fdsDetectionStatus=#{fdsDetectionStatus}
    </select>


    <!-- safetyRule 조회-->
    <select id="selectSafetyRuleByCardId"
            resultType="com.kopo.SelfFDS.member.model.dto.SafetyCard">
        select * from safetyCard where cardId=#{cardId}
    </select>

<!--    결제내역의 값이 safetyrule에 해당하는지 확인-->
    <select id="checkSafetyRule" resultType="com.kopo.SelfFDS.member.model.dto.SafetyCard">
        SELECT *
        FROM SAFETYCARD
        WHERE CARDID=#{cardId} AND STATUS='Y'
        <if test="regionName != null">
            AND (regionName=#{regionName} OR regionName IS NULL)
        </if>
        <if test="categorySmall != null">
            AND (categorySmall=#{categorySmall} OR categorySmall IS NULL)
        </if>
        <if test="time != null">
            AND (#{time} BETWEEN SUBSTR(time, 1, 2) AND SUBSTR(time, 7, 2) OR time IS NULL)
        </if>

    </select>

    <!--    cardhistory 테이블에 데이터 삽입-->
    <insert id="insertCardHistory">
        INSERT INTO CARDHISTORY(CARDHISID,CARDID,CATEGORYBIG,CATEGORYSMALL,REGIONNAME,STORE,CARDHISDATE,CARDHISTIME,AMOUNT)
        VALUES (CARD_HIS_ID_SEQ.NEXTVAL, #{cardId}, 'gg', #{categorySmall},#{address},#{store}, TO_DATE(#{paymentDate} || ' ' || #{time}, 'YYYY-MM-DD HH24:MI:SS'), #{time}, #{amount})
    </insert>

<!--    safetycard하고 PAYMENTLOG 테이블에 데이터 삽입-->
    <insert id="insertPaymentLog">
        INSERT INTO PAYMENTLOG (PAYMENTLOGID, CARDID, ADDRESS, STORE, PAYMENTDATE, categorySmall, AMOUNT, paymentApprovalStatus)
        VALUES (PAYMENTLOGIDSEQ.nextval, #{cardId}, #{address}, #{store}, TO_TIMESTAMP(#{paymentDate} || ' ' || #{time}, 'YYYY-MM-DD HH24:MI:SS'), #{categorySmall}, #{amount}, #{paymentApprovalStatus})
    </insert>

    <select id="selectPreprocessingCategory" resultType="double">
        SELECT diamondToembedding as categorySmallNumeric
        FROM CATEGORYembedding
        WHERE CATEGORYSMALL=#{categorySmall}
    </select>

    <select id="selectPreprocessingRegion" resultType="int">
        SELECT SEOULTTOREGIONDISTANCE as regionNameNumeric
        FROM REGIONembedding
        WHERE regionName=#{regionName}
    </select>

    <update id="updateAnomalyDetection">
        UPDATE PAYMENTLOG
        SET FDSDETECTIONSTATUS = 'Y'
        WHERE PAYMENTDATE = (
            SELECT MAX(PAYMENTDATE)
            FROM PAYMENTLOG
            WHERE CARDID = #{cardId}
        ) and CARDID = #{cardId}
    </update>

    <select id="selectPaymentLogId" resultType="int">
        SELECT paymentlogid
        FROM paymentlog
        WHERE cardId = #{cardId}
          AND store = #{store}
          AND paymentdate = (
            SELECT MAX(paymentdate)
            FROM paymentlog
            WHERE cardId = #{cardId}
              AND store = #{store}
        )
    </select>


</mapper>

